#!/bin/sh
# Use `tool/start-service` to start the server,
# or `tool/start-service --dev` to start the server and
# auto restart when the code is updated.

cd `dirname $0`'/..'
source tool/load-env
current_pid=$$

celery_cmd="celery -A celeryworker.celery worker -l INFO -B -Q ${CELERY_QUEUE}"

killSubproc() {
    test $celery_pid -ne 0 && kill -QUIT $celery_pid
	exit 1
}

runCeleryBackground() {
    $celery_cmd &
    celery_pid=$!
    sleep 1.5
    if [ -z "`ps $celery_pid | sed 1d`" ]; then
        celery_pid=0;
    fi
}


echoMD5() {
	if [ -n "`command -v md5`" ]; then
		md5_comm="md5"
	else
		md5_comm="md5sum"
	fi
	echo `ls -lR $1 | grep -E \.py$ | $md5_comm`
}

echoCeleryMD5() {
    echo `echoMD5 ./celeryworker`
}

monitorModify() {
    new_celery_MD5=`echoCeleryMD5`
    if [ "$old_celery_MD5" != "$new_celery_MD5" ]; then
        echo ""
        echo "--------------- reload celery ---------------"
        echo ""
        test $celery_pid -ne 0 && kill -QUIT $celery_pid
        runCeleryBackground
        old_celery_MD5=`echoCeleryMD5`
    fi
}

if [ "$1" == "--dev" ]; then
	# To clean up subproces when user press ctrl+c
	trap 'killSubproc' INT
	# TODO: We don't know why add this line, add comments
	trap 'server_pid=0' USR1

	runCeleryBackground

	old_celery_MD5=`echoCeleryMD5`
	while [ 1 ]; do
		sleep 1
		monitorModify
	done
else
	$celery_cmd
fi
